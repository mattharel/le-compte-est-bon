{"version":3,"sources":["logo.svg","model/plaque.js","util/combinaison.js","App.js","reportWebVitals.js","index.js"],"names":["Plaque","valeur","construction","latex","debugCalculus","this","toString","autrePlaque","parseInt","possibilites","a","b","lpossibles","push","plus","moins","divise","fois","compte","plaques","but","listeResultat","meilleur","Number","MAX_SAFE_INTEGER","forEach","plaque","index","Math","abs","length","indexPlaque1","indexPlaque2","plaquesCopy","splice","App","useState","plaque1Valeur","setPlaque1Valeur","plaque2Valeur","setPlaque2Valeur","plaque3Valeur","setPlaque3Valeur","plaque4Valeur","setPlaque4Valeur","plaque5Valeur","setPlaque5Valeur","plaque6Valeur","setPlaque6Valeur","setBut","bestResult","setBestResult","Container","maxWidth","className","Grid","container","spacing","item","xs","TextField","label","value","type","onChange","e","target","fullWidth","alignItems","direction","justify","Button","variant","color","onClick","initPlaques","plaquesChoisies","plaqueRandom","floor","random","handleRandom","resultsTmp","console","log","best","handleCompte","Typography","math","Accordion","AccordionSummary","aria-controls","id","AccordionDetails","style","whiteSpace","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07b1566f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export class Plaque {\r\n  constructor(valeur, construction = null, latex = null, debugCalculus = null) {\r\n    this.valeur = valeur;\r\n    if (construction === null) {\r\n      this.construction = valeur.toString();\r\n    } else {\r\n      this.construction = construction;\r\n    }\r\n    if (latex === null) {\r\n      this.latex = valeur.toString();\r\n    } else {\r\n      this.latex = latex;\r\n    }\r\n    if (debugCalculus === null) {\r\n      this.debugCalculus = \"\";\r\n    } else {\r\n      this.debugCalculus = debugCalculus;\r\n    }\r\n  }\r\n  toString() {\r\n    return (\r\n      \"On obtient \" +\r\n      this.valeur +\r\n      \" en faisant le calcul suivant \" +\r\n      this.construction\r\n    );\r\n  }\r\n  plus(autrePlaque) {\r\n    return new Plaque(\r\n      parseInt(this.valeur) + parseInt(autrePlaque.valeur),\r\n      \"(\" + this.construction + \"+\" + autrePlaque.construction + \")\",\r\n      \"(\" + this.latex + \"+\" + autrePlaque.latex + \")\",\r\n      this.debugCalculus +\r\n        autrePlaque.debugCalculus +\r\n        this.valeur +\r\n        \" + \" +\r\n        autrePlaque.valeur +\r\n        \" = \" +\r\n        (parseInt(this.valeur) + parseInt(autrePlaque.valeur)) +\r\n        \"\\n\"\r\n    );\r\n  }\r\n  moins(autrePlaque) {\r\n    return new Plaque(\r\n      this.valeur - autrePlaque.valeur,\r\n      \"(\" + this.construction + \"-\" + autrePlaque.construction + \")\",\r\n      \"(\" + this.latex + \"-\" + autrePlaque.latex + \")\",\r\n      this.debugCalculus +\r\n        autrePlaque.debugCalculus +\r\n        +this.valeur +\r\n        \" - \" +\r\n        autrePlaque.valeur +\r\n        \" = \" +\r\n        (this.valeur - autrePlaque.valeur) +\r\n        \"\\n\"\r\n    );\r\n  }\r\n  fois(autrePlaque) {\r\n    return new Plaque(\r\n      this.valeur * autrePlaque.valeur,\r\n      \"(\" + this.construction + \"*\" + autrePlaque.construction + \")\",\r\n      this.latex + \"\\\\times\" + autrePlaque.latex,\r\n      this.debugCalculus +\r\n        autrePlaque.debugCalculus +\r\n        +this.valeur +\r\n        \" * \" +\r\n        autrePlaque.valeur +\r\n        \" = \" +\r\n        this.valeur * autrePlaque.valeur +\r\n        \"\\n\"\r\n    );\r\n  }\r\n  divise(autrePlaque) {\r\n    if (autrePlaque.valeur !== 0) {\r\n      return new Plaque(\r\n        this.valeur / autrePlaque.valeur,\r\n        \"(\" + this.construction + \"/\" + autrePlaque.construction + \")\",\r\n        \"\\\\frac{\" + this.latex + \"}{\" + autrePlaque.latex + \"}\",\r\n        this.debugCalculus +\r\n          autrePlaque.debugCalculus +\r\n          +this.valeur +\r\n          \" / \" +\r\n          autrePlaque.valeur +\r\n          \" = \" +\r\n          this.valeur / autrePlaque.valeur +\r\n          \"\\n\"\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Plaque } from \"../model/plaque\";\r\n\r\nfunction possibilites(a, b) {\r\n  const lpossibles = [];\r\n  lpossibles.push(a.plus(b));\r\n  if (a.valeur > b.valeur) {\r\n    lpossibles.push(a.moins(b));\r\n    if (b.valeur !== 0 && b.valeur !== 1 && a.valeur % b.valeur === 0) {\r\n      lpossibles.push(a.divise(b));\r\n    }\r\n  } else {\r\n    lpossibles.push(b.moins(a));\r\n    if (a.valeur !== 0 && a.valeur !== 1 && b.valeur % a.valeur === 0) {\r\n      lpossibles.push(b.divise(a));\r\n    }\r\n  }\r\n  if (b.valeur !== 1 && a.valeur !== 1 && b.valeur !== 0 && a.valeur !== 0) {\r\n    lpossibles.push(a.fois(b));\r\n  }\r\n\r\n  return lpossibles;\r\n}\r\n\r\nexport const testPossible = () => {\r\n  let plaque1 = new Plaque(3);\r\n  let plaque2 = new Plaque(6);\r\n  let plaque3 = new Plaque(6);\r\n  let plaque4 = new Plaque(7);\r\n  let plaque5 = new Plaque(50);\r\n  let plaque6 = new Plaque(50);\r\n  let but = 140;\r\n  const resultats = []; //possibilites(plaque1, plaque2);\r\n  compte(\r\n    [plaque1, plaque2, plaque3, plaque4, plaque5, plaque6],\r\n    but,\r\n    resultats,\r\n    [Number.MAX_SAFE_INTEGER]\r\n  );\r\n  resultats.forEach((resultat, index) => console.log(index + resultat));\r\n};\r\n\r\nexport function compte(\r\n  plaques,\r\n  but,\r\n  listeResultat,\r\n  meilleur = [Number.MAX_SAFE_INTEGER]\r\n) {\r\n  if (meilleur[0] !== 0) {\r\n    plaques.forEach((plaque) => {\r\n      if (!(plaque in listeResultat)) {\r\n        const index = Math.abs(plaque.valeur - but);\r\n        if (index <= meilleur[0]) {\r\n          if (listeResultat[index] != null) {\r\n            listeResultat[index].push(plaque);\r\n          } else {\r\n            listeResultat[index] = [plaque];\r\n            meilleur[0] = index;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    if (plaques.length === 1) {\r\n      return;\r\n    }\r\n    for (\r\n      let indexPlaque1 = 0;\r\n      indexPlaque1 < plaques.length - 1;\r\n      indexPlaque1++\r\n    ) {\r\n      for (\r\n        let indexPlaque2 = indexPlaque1 + 1;\r\n        indexPlaque2 < plaques.length;\r\n        indexPlaque2++\r\n      ) {\r\n        let plaque1 = plaques[indexPlaque1];\r\n        let plaque2 = plaques[indexPlaque2];\r\n\r\n        let combinaison = possibilites(plaque1, plaque2);\r\n        // eslint-disable-next-line no-loop-func\r\n        combinaison.forEach((plaque) => {\r\n          const plaquesCopy = [...plaques];\r\n          plaquesCopy.splice(indexPlaque1, 1);\r\n          plaquesCopy.splice(indexPlaque2 - 1, 1);\r\n          plaquesCopy.push(plaque);\r\n          compte(plaquesCopy, but, listeResultat, meilleur);\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import logo from \"./logo.svg\";\nimport \"katex/dist/katex.min.css\";\nimport { InlineMath, BlockMath } from \"react-katex\";\nimport { testPossible, compte } from \"./util/combinaison\";\nimport {\n  Container,\n  TextField,\n  Grid,\n  Button,\n  Typography,\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Paper,\n} from \"@material-ui/core\";\n\nimport { useState } from \"react\";\nimport { Plaque } from \"./model/plaque\";\nimport \"./App.css\";\nfunction App() {\n  const [plaque1Valeur, setPlaque1Valeur] = useState(3);\n  const [plaque2Valeur, setPlaque2Valeur] = useState(6);\n  const [plaque3Valeur, setPlaque3Valeur] = useState(6);\n  const [plaque4Valeur, setPlaque4Valeur] = useState(7);\n  const [plaque5Valeur, setPlaque5Valeur] = useState(50);\n  const [plaque6Valeur, setPlaque6Valeur] = useState(50);\n  const [but, setBut] = useState(140);\n  const [bestResult, setBestResult] = useState(null);\n  const handleCompte = () => {\n    let plaque1 = new Plaque(plaque1Valeur);\n    let plaque2 = new Plaque(plaque2Valeur);\n    let plaque3 = new Plaque(plaque3Valeur);\n    let plaque4 = new Plaque(plaque4Valeur);\n    let plaque5 = new Plaque(plaque5Valeur);\n    let plaque6 = new Plaque(plaque6Valeur);\n    let resultsTmp = [];\n    compte(\n      [plaque1, plaque2, plaque3, plaque4, plaque5, plaque6],\n      but,\n      resultsTmp\n    );\n    console.log(resultsTmp);\n    let best = null;\n    for (let index = 0; index < resultsTmp.length || !best; index++) {\n      if (resultsTmp[index] && resultsTmp[index].length > 0) {\n        best = resultsTmp[index][0];\n        setBestResult(best);\n        break;\n      }\n    }\n  };\n  const handleRandom = () => {\n    const initPlaques = [\n      1,\n      1,\n      2,\n      2,\n      3,\n      3,\n      4,\n      4,\n      5,\n      5,\n      6,\n      6,\n      7,\n      7,\n      8,\n      8,\n      9,\n      9,\n      10,\n      10,\n      25,\n      25,\n      50,\n      50,\n      75,\n      75,\n      100,\n      100,\n    ];\n    const plaquesChoisies = [];\n    for (let index = 0; index < 6; index++) {\n      const plaqueRandom = initPlaques.splice(\n        Math.floor(Math.random() * (initPlaques.length - 1)),\n        1\n      );\n      plaquesChoisies.push(plaqueRandom);\n    }\n    setPlaque1Valeur(plaquesChoisies[0]);\n    setPlaque2Valeur(plaquesChoisies[1]);\n    setPlaque3Valeur(plaquesChoisies[2]);\n    setPlaque4Valeur(plaquesChoisies[3]);\n    setPlaque5Valeur(plaquesChoisies[4]);\n    setPlaque6Valeur(plaquesChoisies[5]);\n    setBut(100 + Math.floor(Math.random() * 899));\n  };\n  return (\n    <Container maxWidth=\"sm\" className=\"container\">\n      <Grid container spacing={3}>\n        <Grid item xs={4}>\n          <TextField\n            label=\"Plaque 1\"\n            value={plaque1Valeur}\n            type=\"number\"\n            onChange={(e) => setPlaque1Valeur(parseInt(e.target.value))}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <TextField\n            label=\"Plaque 2\"\n            type=\"number\"\n            value={plaque2Valeur}\n            onChange={(e) => setPlaque2Valeur(parseInt(e.target.value))}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <TextField\n            label=\"Plaque 3\"\n            value={plaque3Valeur}\n            type=\"number\"\n            onChange={(e) => setPlaque3Valeur(parseInt(e.target.value))}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <TextField\n            label=\"Plaque 4\"\n            value={plaque4Valeur}\n            type=\"number\"\n            onChange={(e) => setPlaque4Valeur(parseInt(e.target.value))}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <TextField\n            label=\"Plaque 5\"\n            value={plaque5Valeur}\n            type=\"number\"\n            onChange={(e) => setPlaque5Valeur(parseInt(e.target.value))}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <TextField\n            label=\"Plaque 6\"\n            value={plaque6Valeur}\n            type=\"number\"\n            onChange={(e) => setPlaque6Valeur(parseInt(e.target.value))}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label=\"But\"\n            fullWidth\n            value={but}\n            type=\"number\"\n            onChange={(e) => setBut(parseInt(e.target.value))}\n          />\n        </Grid>\n        <Grid xs={12} item>\n          <Grid\n            container\n            alignItems=\"center\"\n            direction=\"row\"\n            justify=\"center\"\n            spacing={3}\n          >\n            <Grid xs={4} item>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => handleRandom()}\n              >\n                Remplissage automatique\n              </Button>\n            </Grid>\n            <Grid xs={4} item>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => handleCompte()}\n              >\n                Le compte est bon\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid xs={12} item>\n          <Grid container alignItems=\"center\" direction=\"row\" justify=\"center\">\n            {bestResult && (\n              <Typography variant=\"overline\">\n                Meilleur resultat, {bestResult.valeur} ={\" \"}\n                <InlineMath math={bestResult.latex} />\n              </Typography>\n            )}\n          </Grid>\n        </Grid>\n        <Grid xs={12} item>\n          {bestResult && (\n            <Accordion>\n              <AccordionSummary\n                aria-controls=\"panel1a-content\"\n                id=\"panel1a-header\"\n              >\n                <Typography variant=\"heading\">Étapes</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Typography variant=\"overline\">\n                  <p style={{ whiteSpace: \"pre-line\" }}>\n                    {bestResult.debugCalculus}\n                  </p>\n                </Typography>\n              </AccordionDetails>\n            </Accordion>\n          )}\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}