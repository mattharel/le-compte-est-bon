{"version":3,"sources":["util/constant.js","logo.svg","util/combinaison.js","model/plaque.js","App.js","reportWebVitals.js","index.js"],"names":["initPlaques","possibilites","a","b","lpossibles","push","plus","valeur","moins","divise","fois","compte","plaques","but","listeResultat","nombreDAppel","meilleur","Number","MAX_SAFE_INTEGER","forEach","plaque","index","Math","abs","length","indexPlaque1","indexPlaque2","plaquesCopy","splice","Plaque","construction","latex","debugCalculus","this","toString","autrePlaque","parseInt","App","useState","setBut","bestResult","setBestResult","espaceExplore","setEspaceExplore","tempsTotal","setTempsTotal","plaquesSelectionnes","setPlaquesSelectionnees","handleFABPlaqueChange","newSelection","includes","indexOf","shift","handleCompte","resultsTmp","debut","Date","now","best","Container","maxWidth","className","Grid","container","spacing","item","xs","alignItems","direction","justify","map","Fab","aria-label","onClick","color","Divider","TextField","label","fullWidth","value","type","onChange","e","target","Button","variant","plaquesChoisies","echantillion","plaqueRandom","floor","random","handleRandom","Typography","math","Accordion","AccordionSummary","aria-controls","id","AccordionDetails","style","whiteSpace","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6bb6f27.chunk.js","sourcesContent":["export const NOMBRE_PLAQUE = 6;\r\nexport const initPlaques = [\r\n  1,\r\n  1,\r\n  2,\r\n  2,\r\n  3,\r\n  3,\r\n  4,\r\n  4,\r\n  5,\r\n  5,\r\n  6,\r\n  6,\r\n  7,\r\n  7,\r\n  8,\r\n  8,\r\n  9,\r\n  9,\r\n  10,\r\n  10,\r\n  25,\r\n  25,\r\n  50,\r\n  50,\r\n  75,\r\n  75,\r\n  100,\r\n  100,\r\n];\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","function possibilites(a, b) {\r\n  const lpossibles = [];\r\n  lpossibles.push(a.plus(b));\r\n  if (a.valeur > b.valeur) {\r\n    // abs(a-b)==abs(b-a) donc inutile d'avoir les deux\r\n    // a == b -> a-b == 0 -> aucun interet\r\n    lpossibles.push(a.moins(b));\r\n    if (b.valeur !== 0 && b.valeur !== 1 && a.valeur % b.valeur === 0) {\r\n      // division par zero et division par 1 inutile\r\n      lpossibles.push(a.divise(b));\r\n    }\r\n  } else {\r\n    lpossibles.push(b.moins(a));\r\n    if (a.valeur !== 0 && a.valeur !== 1 && b.valeur % a.valeur === 0) {\r\n      lpossibles.push(b.divise(a));\r\n    }\r\n  }\r\n  if (b.valeur !== 1 && a.valeur !== 1 && b.valeur !== 0 && a.valeur !== 0) {\r\n    // multiplication par 1 inutile, par 0 aussi\r\n    lpossibles.push(a.fois(b));\r\n  }\r\n  return lpossibles;\r\n}\r\n\r\nexport function compte(\r\n  plaques,\r\n  but,\r\n  listeResultat,\r\n  nombreDAppel = [0],\r\n  meilleur = [Number.MAX_SAFE_INTEGER]\r\n) {\r\n  nombreDAppel[0]++;\r\n  // En recursif Tant que le meilleur resultat n'a pas 0 d'ecart avec le but on continue\r\n  // sauf si plaques restante == 1 voir plus bas\r\n  if (meilleur[0] !== 0) {\r\n    //On regarde si chacune des plaques est le resultat sinon on enregistre le meilleur resultat\r\n    plaques.forEach((plaque) => {\r\n      if (!(plaque in listeResultat)) {\r\n        const index = Math.abs(plaque.valeur - but);\r\n        if (index <= meilleur[0]) {\r\n          // Si on veut tout l'espace d'etat on enleve le if du dessus\r\n          // Si on veut tout les resultats parfait on enleve le premier if et le prochain if s'occupe du reste\r\n          if (listeResultat[index] != null) {\r\n            listeResultat[index].push(plaque);\r\n          } else {\r\n            listeResultat[index] = [plaque];\r\n            meilleur[0] = index;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    // En recursif si il nous reste qu'une plaque, plus aucune combinaison est possible on remonte le noeud\r\n    if (plaques.length === 1) {\r\n      return;\r\n    }\r\n    // Sinon on compare chaque plaque deux a deux\r\n    for (\r\n      let indexPlaque1 = 0;\r\n      indexPlaque1 < plaques.length - 1;\r\n      indexPlaque1++\r\n    ) {\r\n      for (\r\n        let indexPlaque2 = indexPlaque1 + 1;\r\n        indexPlaque2 < plaques.length;\r\n        indexPlaque2++\r\n      ) {\r\n        let plaque1 = plaques[indexPlaque1];\r\n        let plaque2 = plaques[indexPlaque2];\r\n        // On fait toutes les combinaisons possibles pour ces plaques, on\r\n        // On les retires de l'espace d'etat\r\n        // Et on explore chacun des nouveaux noeud\r\n        let combinaison = possibilites(plaque1, plaque2);\r\n        // eslint-disable-next-line no-loop-func\r\n        combinaison.forEach((plaque) => {\r\n          const plaquesCopy = [...plaques];\r\n          plaquesCopy.splice(indexPlaque1, 1);\r\n          plaquesCopy.splice(indexPlaque2 - 1, 1);\r\n          plaquesCopy.push(plaque);\r\n          compte(plaquesCopy, but, listeResultat, nombreDAppel, meilleur);\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","export class Plaque {\r\n  constructor(valeur, construction = null, latex = null, debugCalculus = null) {\r\n    this.valeur = valeur;\r\n    if (construction === null) {\r\n      this.construction = valeur.toString();\r\n    } else {\r\n      this.construction = construction;\r\n    }\r\n    if (latex === null) {\r\n      this.latex = valeur.toString();\r\n    } else {\r\n      this.latex = latex;\r\n    }\r\n    if (debugCalculus === null) {\r\n      this.debugCalculus = \"\";\r\n    } else {\r\n      this.debugCalculus = debugCalculus;\r\n    }\r\n  }\r\n  toString() {\r\n    return (\r\n      \"On obtient \" +\r\n      this.valeur +\r\n      \" en faisant le calcul suivant \" +\r\n      this.construction\r\n    );\r\n  }\r\n  plus(autrePlaque) {\r\n    return new Plaque(\r\n      parseInt(this.valeur) + parseInt(autrePlaque.valeur),\r\n      \"(\" + this.construction + \"+\" + autrePlaque.construction + \")\",\r\n      \"(\" + this.latex + \"+\" + autrePlaque.latex + \")\",\r\n      this.debugCalculus +\r\n        autrePlaque.debugCalculus +\r\n        this.valeur +\r\n        \" + \" +\r\n        autrePlaque.valeur +\r\n        \" = \" +\r\n        (parseInt(this.valeur) + parseInt(autrePlaque.valeur)) +\r\n        \"\\n\"\r\n    );\r\n  }\r\n  moins(autrePlaque) {\r\n    return new Plaque(\r\n      this.valeur - autrePlaque.valeur,\r\n      \"(\" + this.construction + \"-\" + autrePlaque.construction + \")\",\r\n      \"(\" + this.latex + \"-\" + autrePlaque.latex + \")\",\r\n      this.debugCalculus +\r\n        autrePlaque.debugCalculus +\r\n        +this.valeur +\r\n        \" - \" +\r\n        autrePlaque.valeur +\r\n        \" = \" +\r\n        (this.valeur - autrePlaque.valeur) +\r\n        \"\\n\"\r\n    );\r\n  }\r\n  fois(autrePlaque) {\r\n    return new Plaque(\r\n      this.valeur * autrePlaque.valeur,\r\n      \"(\" + this.construction + \"*\" + autrePlaque.construction + \")\",\r\n      this.latex + \"\\\\times\" + autrePlaque.latex,\r\n      this.debugCalculus +\r\n        autrePlaque.debugCalculus +\r\n        +this.valeur +\r\n        \" * \" +\r\n        autrePlaque.valeur +\r\n        \" = \" +\r\n        this.valeur * autrePlaque.valeur +\r\n        \"\\n\"\r\n    );\r\n  }\r\n  divise(autrePlaque) {\r\n    if (autrePlaque.valeur !== 0) {\r\n      return new Plaque(\r\n        this.valeur / autrePlaque.valeur,\r\n        \"(\" + this.construction + \"/\" + autrePlaque.construction + \")\",\r\n        \"\\\\frac{\" + this.latex + \"}{\" + autrePlaque.latex + \"}\",\r\n        this.debugCalculus +\r\n          autrePlaque.debugCalculus +\r\n          +this.valeur +\r\n          \" / \" +\r\n          autrePlaque.valeur +\r\n          \" = \" +\r\n          this.valeur / autrePlaque.valeur +\r\n          \"\\n\"\r\n      );\r\n    }\r\n  }\r\n}\r\n","import logo from \"./logo.svg\";\r\nimport { initPlaques, NOMBRE_PLAQUE } from \"./util/constant\";\r\nimport \"katex/dist/katex.min.css\";\r\nimport { InlineMath, BlockMath } from \"react-katex\";\r\nimport { testPossible, compte } from \"./util/combinaison\";\r\nimport {\r\n  Container,\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n  Typography,\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  Select,\r\n  MenuItem,\r\n  Paper,\r\n  Avatar,\r\n  Fab,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Plaque } from \"./model/plaque\";\r\nimport \"./App.css\";\r\nfunction App() {\r\n  const [but, setBut] = useState(140);\r\n  const [bestResult, setBestResult] = useState(null);\r\n  const [espaceExplore, setEspaceExplore] = useState(null);\r\n  const [tempsTotal, setTempsTotal] = useState(null);\r\n\r\n  const [plaquesSelectionnes, setPlaquesSelectionnees] = useState([\r\n    4,\r\n    11,\r\n    12,\r\n    13,\r\n    22,\r\n    23,\r\n  ]);\r\n\r\n  const handleFABPlaqueChange = (index) => {\r\n    const newSelection = [...plaquesSelectionnes];\r\n\r\n    if (plaquesSelectionnes.includes(index)) {\r\n      newSelection.splice(newSelection.indexOf(index), 1);\r\n    } else {\r\n      if (plaquesSelectionnes.length >= NOMBRE_PLAQUE) {\r\n        newSelection.shift();\r\n      }\r\n      newSelection.push(index);\r\n    }\r\n    setPlaquesSelectionnees(newSelection);\r\n  };\r\n  const handleCompte = () => {\r\n    const plaques = [];\r\n    for (let index = 0; index < NOMBRE_PLAQUE; index++) {\r\n      plaques.push(new Plaque(initPlaques[plaquesSelectionnes[index]]));\r\n    }\r\n    let resultsTmp = [];\r\n    let nombreDAppel = [0];\r\n    const debut = Date.now();\r\n    compte(plaques, but, resultsTmp, nombreDAppel);\r\n    setTempsTotal(Date.now() - debut);\r\n    let best = null;\r\n    for (let index = 0; index < resultsTmp.length || !best; index++) {\r\n      if (resultsTmp[index] && resultsTmp[index].length > 0) {\r\n        best = resultsTmp[index][0];\r\n        setBestResult(best);\r\n        break;\r\n      }\r\n    }\r\n    setEspaceExplore(nombreDAppel[0]);\r\n  };\r\n\r\n  const handleRandom = () => {\r\n    const plaquesChoisies = [];\r\n    const echantillion = [...initPlaques];\r\n    for (let index = 0; index < NOMBRE_PLAQUE; index++) {\r\n      let plaqueRandom;\r\n      do {\r\n        plaqueRandom = Math.floor(Math.random() * (echantillion.length - 1));\r\n      } while (plaquesChoisies.includes(plaqueRandom));\r\n      plaquesChoisies.push(plaqueRandom);\r\n    }\r\n    setPlaquesSelectionnees(plaquesChoisies);\r\n    setBut(100 + Math.floor(Math.random() * 899));\r\n  };\r\n  return (\r\n    <Container maxWidth=\"sm\" className=\"container\">\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Grid\r\n            container\r\n            spacing={4}\r\n            alignItems=\"center\"\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n          >\r\n            {initPlaques.map((plaque, index) =>\r\n              plaquesSelectionnes.includes(index) ? (\r\n                <Grid key={index} item xs={\"auto\"}>\r\n                  <Fab\r\n                    key={index}\r\n                    aria-label={plaque}\r\n                    onClick={() => handleFABPlaqueChange(index)}\r\n                    color={\"primary\"}\r\n                  >\r\n                    {plaque}\r\n                  </Fab>\r\n                </Grid>\r\n              ) : (\r\n                \"\"\r\n              )\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Divider />\r\n        <Grid item xs={12}>\r\n          <Grid\r\n            container\r\n            spacing={1}\r\n            alignItems=\"center\"\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n          >\r\n            {initPlaques.map((plaque, index) =>\r\n              plaquesSelectionnes.includes(index) ? (\r\n                \"\"\r\n              ) : (\r\n                <Grid key={index} item xs={\"auto\"}>\r\n                  <Fab\r\n                    key={index}\r\n                    aria-label={plaque}\r\n                    onClick={() => handleFABPlaqueChange(index)}\r\n                    color={\"default\"}\r\n                  >\r\n                    {plaque}\r\n                  </Fab>\r\n                </Grid>\r\n              )\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            label=\"But\"\r\n            fullWidth\r\n            value={but}\r\n            type=\"number\"\r\n            onChange={(e) => setBut(parseInt(e.target.value))}\r\n          />\r\n        </Grid>\r\n        <Grid xs={12} item>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            spacing={3}\r\n          >\r\n            <Grid xs={4} item>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={() => handleRandom()}\r\n              >\r\n                Tirage aléatoire\r\n              </Button>\r\n            </Grid>\r\n            <Grid xs={4} item>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={() => handleCompte()}\r\n              >\r\n                Le compte est bon\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid xs={12} item>\r\n          <Grid container alignItems=\"center\" direction=\"row\" justify=\"center\">\r\n            {bestResult && (\r\n              <Typography variant=\"overline\">\r\n                Meilleur resultat, {bestResult.valeur} ={\" \"}\r\n                <InlineMath math={bestResult.latex} />. Espace exploré :{\" \"}\r\n                {espaceExplore} états visités en {tempsTotal} ms.\r\n              </Typography>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid xs={12} item>\r\n          {bestResult && (\r\n            <Accordion>\r\n              <AccordionSummary\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n              >\r\n                <Typography variant=\"heading\">Étapes</Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <Typography variant=\"overline\">\r\n                  <p style={{ whiteSpace: \"pre-line\" }}>\r\n                    {bestResult.debugCalculus}\r\n                  </p>\r\n                </Typography>\r\n              </AccordionDetails>\r\n            </Accordion>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}